{"version":3,"sources":["assets/images/logo.svg","assets/images/blue-marker.svg","constants.js","components/TopBar.js","components/Register.js","components/Login.js","components/Gallery.js","components/CreatePostForm.js","components/CreatePostButton.js","components/AroundMarker.js","components/AroundMap.js","components/Home.js","components/Main.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","TOKEN_KEY","API_ROOT","GEO_OPTIONS","enableHighAccuracy","maximumAge","timeout","POST_TYPE_VIDEO","POST_TYPE_UNKNOWN","TopBar","className","src","logo","alt","Link","to","this","props","isLoggedIn","onClick","handleLogout","type","username","Component","RegistrationForm","state","confirmDirty","autoCompleteResult","handleConfirmBlur","e","value","target","setState","compareToFirstPassword","rule","callback","form","getFieldValue","validateToNextPassword","validateFields","force","validateUsername","handleSubmit","preventDefault","err","values","console","log","fetch","method","body","JSON","stringify","password","then","response","ok","text","Error","statusText","data","message","success","catch","error","getFieldDecorator","tailFormItemLayout","wrapperCol","xs","span","offset","sm","labelCol","onSubmit","Item","label","rules","required","hasFeedback","validator","Password","onBlur","htmlType","Register","Form","create","name","NormalLoginForm","stateText","handleLoginSucceed","prefix","style","color","placeholder","Login","Gallery","images","map","image","customOverlay","user","caption","backdropClosesModal","enableImageSelection","NormalCreatePostForm","normFile","Array","isArray","fileList","beforeUpload","formItemLayout","valuePropName","getValueFromEvent","Dragger","React","CreatePostForm","CreatePostButton","visible","confirmLoading","showModal","handleOk","token","localStorage","getItem","parse","lat","lon","formData","FormData","set","originFileObj","headers","Authorization","loadNearbyPosts","resetFields","getFormRef","formInstance","handleCancel","title","onOk","okText","onCancel","ref","Redirect","AroundMarker","isOpen","handleToggle","prevState","post","url","location","isImagePost","customIcon","undefined","blueMarkerUrl","scaledSize","window","google","maps","Size","position","lng","onMouseOver","onMouseOut","icon","controls","NormalAroundMap","getMapRef","mapInstance","reloadMarker","center","getCenter","radius","getRadius","loadPostsByTopic","bounds","getBounds","ne","getNorthEast","right","LatLng","geometry","spherical","computeDistanceBetween","defaultZoom","defaultCenter","onDragEnd","onZoomChanged","posts","key","AroundMap","withScriptjs","withGoogleMap","TabPane","Tabs","Home","isLoadingGeoLocation","isLoadingPosts","topic","onSuccessLoadGeoLocation","coords","latitude","longitude","setItem","onFailedLoadGeoLocation","range","json","loadFacesAroundTheWolrd","handleTopicChange","navigator","geolocation","getCurrentPosition","hei","img","Image","onload","width","height","filter","getMeta","thumbnail","thumbnailWidth","wid","thumbnailHeight","gutter","includes","tip","length","renderImagePosts","renderVideoPosts","operations","Group","onChange","tabBarExtraContent","tab","renderPosts","googleMapURL","loadingElement","containerElement","mapElement","Main","getLogin","getHome","Switch","Route","path","render","component","App","Boolean","removeItem","handleLogin","hostname","match","ReactDOM","StrictMode","BrowserRouter","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7433bc8f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","module.exports = __webpack_public_path__ + \"static/media/blue-marker.bc8cc4ea.svg\";","export const TOKEN_KEY = 'TOKEN_KEY';\nexport const USER_NAME = 'USER_NAME';\n\nexport const API_ROOT = \"https://effective-brook-280917.wn.r.appspot.com\";\n\nexport const GEO_OPTIONS = {\n    enableHighAccuracy: true,\n    maximumAge        : 300000,\n    timeout           : 27000,\n};\nexport const POS_KEY = 'POS_KEY';\nexport const AUTH_HEADER = 'Bearer';\n\nexport const POST_TYPE_IMAGE = 'image';\nexport const POST_TYPE_VIDEO = 'video';\nexport const POST_TYPE_UNKNOWN = 'unknown';\n\nexport const LOC_SHAKE = 0.02;\nexport const TOPIC_AROUND = 'around';\nexport const TOPIC_FACE = 'face';\n","import React, {Component} from 'react';\nimport { Icon } from 'antd';\nimport logo from '../assets/images/logo.svg';\nimport { TOKEN_KEY } from '../constants';\nimport {Link} from \"react-router-dom\";\n\n\nclass TopBar extends Component {\n\n\n    render() {\n        return (\n            <header className=\"App-header\">\n                <img src={logo} alt=\"logo\" className=\"App-logo\"/>\n                <Link to='/' className=\"App-title\">Around</Link>\n                {this.props.isLoggedIn ?\n                    <a className=\"logout\" onClick={this.props.handleLogout} >\n                        <Icon type=\"logout\"/>{' '}logged in as {this.props.username}, click to log out\n                    </a> : <a className=\"logout\">\n                        <Icon type=\"login\"/>\n                        <Link to='login'>Click to log in</Link> </a> }\n            </header>\n        );\n    }\n}\n\nexport default TopBar;\n","import React, {Component} from 'react';\nimport {Form, Input, Button, message} from 'antd';\nimport {API_ROOT} from '../constants';\nimport { Link } from 'react-router-dom';\n\nclass RegistrationForm extends Component {\n    state = {\n        confirmDirty: false,\n        autoCompleteResult: [],\n    };\n\n    handleConfirmBlur = e => {\n        const {value} = e.target;\n        this.setState({confirmDirty: this.state.confirmDirty || !!value});\n    };\n\n    compareToFirstPassword = (rule, value, callback) => {\n        const {form} = this.props;\n        if (value && value !== form.getFieldValue('password')) {\n            callback('Two passwords that you enter is inconsistent!');\n        } else {\n            callback();\n        }\n    };\n\n    validateToNextPassword = (rule, value, callback) => {\n        const {form} = this.props;\n        if (value && this.state.confirmDirty) {\n            form.validateFields(['confirm'], {force: true});\n        }\n        callback();\n    };\n\n    validateUsername = (rule, value, callback) => {\n\n    };\n\n    handleSubmit = e => {\n        e.preventDefault();\n        this.props.form.validateFields((err, values) => {\n            if (!err) {\n                console.log('Received values of form: ', values);\n                fetch(`${API_ROOT}/signup`, {\n                    method: 'POST',\n                    body: JSON.stringify({\n                        username: values.username,\n                        password: values.password,\n                    }),\n                })\n                    .then((response) => {\n                        if (response.ok) {\n                            return response.text();\n                        }\n                        throw new Error(response.statusText);\n                    })\n                    .then((data) => {\n                        console.log('===== ', data);\n                        message.success('Registration succeed!');\n                    })\n                    .catch((err) => {\n                        console.error(err);\n                        message.error('Registration failed.');\n                    });\n            }\n        });\n    };\n\n    render() {\n        const {getFieldDecorator} = this.props.form;\n\n        const formItemLayout = {\n            labelCol: {\n                xs: {span: 24},\n                sm: {span: 8},\n            },\n            wrapperCol: {\n                xs: {span: 24},\n                sm: {span: 16},\n            },\n        };\n        const tailFormItemLayout = {\n            wrapperCol: {\n                xs: {\n                    span: 24,\n                    offset: 0,\n                },\n                sm: {\n                    span: 16,\n                    offset: 8,\n                },\n            },\n        };\n\n        return (\n            <Form {...formItemLayout} onSubmit={this.handleSubmit} className=\"register\">\n                <Form.Item\n                    label=\"Username\"\n                >\n                    {getFieldDecorator('username', {\n                        rules: [\n                            {\n                                required: true,\n                                message: 'Please input your username!'\n                            }\n                            ],\n                    })(<Input/>)}\n                </Form.Item>\n                <Form.Item label=\"Password\" hasFeedback>\n                    {getFieldDecorator('password', {\n                        rules: [\n                            {\n                                required: true,\n                                message: 'Please input your password!',\n                            },\n                            {\n                                validator: this.validateToNextPassword,\n                            },\n                        ],\n                    })(<Input.Password/>)}\n                </Form.Item>\n                <Form.Item label=\"Confirm Password\" hasFeedback>\n                    {getFieldDecorator('confirm', {\n                        rules: [\n                            {\n                                required: true,\n                                message: 'Please confirm your password!',\n                            },\n                            {\n                                validator: this.compareToFirstPassword,\n                            },\n                        ],\n                    })(<Input.Password onBlur={this.handleConfirmBlur}/>)}\n                </Form.Item>\n                <Form.Item {...tailFormItemLayout}>\n                    <Button type=\"primary\" htmlType=\"submit\">\n                        Register\n                    </Button>\n                    <p>I already have an account, go back to <Link to=\"/login\">login</Link></p>\n                </Form.Item>\n            </Form>\n        );\n    }\n}\n\nexport const Register = Form.create({name: 'register'})(RegistrationForm);","import React, {Component} from 'react';\nimport { Form, Icon, Input, Button, message } from 'antd';\nimport { Link } from 'react-router-dom';\nimport { API_ROOT } from '../constants';\n\nclass NormalLoginForm extends Component {\n    handleSubmit = e => {\n        e.preventDefault();\n        this.props.form.validateFields((err, values) => {\n            if (!err) {\n                console.log('Received values of form: ', values);\n                fetch(`${API_ROOT}/login`, {\n                    method: 'POST',\n                    body: JSON.stringify({\n                        username: values.username,\n                        password: values.password,\n                    }),\n                })\n                    .then((response) => {\n                        if (response.ok) {\n                            //console.log(response.text())\n                            return response.text();\n                        }\n                        throw new Error(response.stateText);\n                    })\n                    .then((data) => {\n                        console.log(data);\n                        this.props.handleLoginSucceed(data, values.username)\n                        message.success(\"Login Success\")\n                    })\n                    .catch((err) => {\n                        console.error(err);\n                        message.error('Login failed.');\n                    });\n            }\n        });\n    };\n\n    render() {\n        const { getFieldDecorator } = this.props.form;\n        return (\n            <Form onSubmit={this.handleSubmit} className=\"login-form\">\n                <Form.Item>\n                    {getFieldDecorator('username', {\n                        rules: [{ required: true, message: 'Please input your username!' }],\n                    })(\n                        <Input\n                            prefix={<Icon type=\"user\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n                            placeholder=\"Username\"\n                        />,\n                    )}\n                </Form.Item>\n                <Form.Item>\n                    {getFieldDecorator('password', {\n                        rules: [{ required: true, message: 'Please input your Password!' }],\n                    })(\n                        <Input\n                            prefix={<Icon type=\"lock\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n                            type=\"password\"\n                            placeholder=\"Password\"\n                        />,\n                    )}\n                </Form.Item>\n                <Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n                        Log in\n                    </Button>\n                    Or <Link to=\"/register\">register now!</Link>\n                </Form.Item>\n            </Form>\n        );\n    }\n}\n\nconst Login = Form.create({ name: 'normal_login' })(NormalLoginForm);\nexport default Login;\n","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport GridGallery from 'react-grid-gallery';\n\nclass Gallery extends Component {\n    static propTypes = {\n        images: PropTypes.arrayOf(\n            PropTypes.shape({\n                user: PropTypes.string.isRequired,\n                src: PropTypes.string.isRequired,\n                thumbnail: PropTypes.string.isRequired,\n                caption: PropTypes.string,\n                thumbnailWidth: PropTypes.number.isRequired,\n                thumbnailHeight: PropTypes.number.isRequired\n            })\n        ).isRequired\n    }\n\n    render() {\n        const images = this.props.images.map((image) => {\n            return {\n                ...image,\n                customOverlay: (\n                    <div className=\"gallery-thumbnail\">\n                        <div>{`${image.user}: ${image.caption}`}</div>\n                    </div>\n                ),\n            };\n        });\n\n        return (\n            <div className=\"gallery\">\n                <GridGallery\n                    backdropClosesModal\n                    images={images}\n                    enableImageSelection={false}/>\n            </div>\n        );\n    }\n}\n\nexport default Gallery;\n","import React from 'react';\nimport { Form, Input, Upload, Icon } from 'antd';\n\nclass NormalCreatePostForm extends React.Component {\n    normFile = e => {\n        console.log('Upload event:', e);\n        if (Array.isArray(e)) {\n            return e;\n        }\n        return e && e.fileList;\n    };\n\n    beforeUpload = () => false;\n\n    render() {\n        const { getFieldDecorator } = this.props.form;\n        const formItemLayout = {\n            labelCol: { span: 6 },\n            wrapperCol: { span: 14 },\n        };\n        return (\n            <Form {...formItemLayout}>\n                <Form.Item label=\"Message\">\n                    {getFieldDecorator('message', {\n                        rules: [{ required: true, message: 'Please input message.' }],\n                    })(<Input />)}\n                </Form.Item>\n                <Form.Item label=\"Image/Video\">\n                    <div className=\"dropbox\">\n                        {getFieldDecorator('image', {\n                            valuePropName: 'fileList',\n                            getValueFromEvent: this.normFile,\n                            rules: [{ required: true, message: 'Please select an image.' }]\n                        })(\n                            <Upload.Dragger name=\"files\" beforeUpload={this.beforeUpload}>\n                                <p className=\"ant-upload-drag-icon\">\n                                    <Icon type=\"inbox\" />\n                                </p>\n                                <p className=\"ant-upload-text\">Click or drag file to this area to upload</p>\n                                <p className=\"ant-upload-hint\">Support for a single or bulk upload.</p>\n                            </Upload.Dragger>,\n                        )}\n                    </div>\n                </Form.Item>\n            </Form>\n        );\n    }\n}\n\nconst CreatePostForm = Form.create()(NormalCreatePostForm);\nexport default CreatePostForm;\n","import React, {Component} from 'react';\nimport { Modal, Button, message } from 'antd';\nimport { API_ROOT, AUTH_HEADER, TOKEN_KEY, POS_KEY } from '../constants';\nimport CreatePostForm from './CreatePostForm';\nimport {Redirect} from \"react-router-dom\";\n\n\nclass CreatePostButton extends Component {\n    state = {\n        visible: false,\n        confirmLoading: false,\n        isLoggedIn: true,\n    };\n\n    showModal = () => {\n        // if (!this.props.isLoggedIn){\n        //     return <Redirect to='/login'/>\n        // }\n        this.setState({\n            visible: true,\n            isLoggedIn : this.props.isLoggedIn\n        });\n    };\n\n    handleOk = () => {\n        console.log('ok');\n        this.form.validateFields((err, values) => {\n            console.log(values);\n            if (!err) {\n                const token = localStorage.getItem(TOKEN_KEY);\n                const { lat, lon } = JSON.parse(localStorage.getItem(POS_KEY));\n\n                const formData = new FormData();\n                formData.set('lat', lat);\n                formData.set('lon', lon);\n                formData.set('message', values.message);\n                formData.set('image', values.image[0].originFileObj);\n\n                this.setState({ confirmLoading: true });\n                fetch(`${API_ROOT}/post`, {\n                    method: 'POST',\n                    headers: {\n                        Authorization: `${AUTH_HEADER} ${token}`\n                    },\n                    body: formData,\n                })\n                    .then((response) => {\n                        if (response.ok) {\n                            return this.props.loadNearbyPosts();\n                        }\n                        throw new Error('Failed to create post.');\n                    })\n                    .then(() => {\n                        this.setState({ visible: false, confirmLoading: false });\n                        this.form.resetFields();\n                        message.success('Post created successfully!');\n                    })\n                    .catch((e) => {\n                        console.error(e);\n                        message.error('Failed to create post.');\n                        this.setState({ confirmLoading: false });\n                    });\n            }\n        });\n    };\n\n    getFormRef = (formInstance) => {\n        this.form = formInstance;\n    }\n\n\n    handleCancel = () => {\n        console.log('Clicked cancel button');\n        this.setState({\n            visible: false,\n        });\n    };\n\n    render() {\n        const { visible, confirmLoading ,isLoggedIn } = this.state;\n        if (!isLoggedIn){\n            return <Redirect to='/login'/>\n        }\n        return (\n            <div>\n                <Button type=\"primary\" onClick={this.showModal}>\n                    Create New Post\n                </Button>\n                <Modal\n                    title=\"Create New Post\"\n                    visible={visible}\n                    onOk={this.handleOk}\n                    okText='Create'\n                    confirmLoading={confirmLoading}\n                    onCancel={this.handleCancel}\n                >\n                    <CreatePostForm ref={this.getFormRef}/>\n                </Modal>\n            </div>\n        );\n    }\n}\n\nexport default CreatePostButton;\n","import React from 'react';\nimport { Marker, InfoWindow } from 'react-google-maps';\nimport PropTypes from 'prop-types';\n\nimport blueMarkerUrl from '../assets/images/blue-marker.svg';\n\nclass AroundMarker extends React.Component {\n    static propTypes = {\n        post: PropTypes.object.isRequired,\n    }\n\n    state = {\n        isOpen: false,\n    }\n\n    handleToggle = () => {\n        this.setState((prevState) => ({ isOpen: !prevState.isOpen }));\n    }\n\n    render() {\n        const { user, message, url, location, type } = this.props.post;\n        const { lat, lon } = location;\n\n        const isImagePost = type === 'image';\n        const customIcon = isImagePost ? undefined : {\n            url: blueMarkerUrl,\n            scaledSize: new window.google.maps.Size(26, 41),\n        };\n\n\n        return (\n            <Marker\n                position={{ lat, lng: lon }}\n                onMouseOver={isImagePost ? this.handleToggle : undefined}\n                onMouseOut={isImagePost ? this.handleToggle : undefined}\n                onClick={isImagePost ? undefined: this.handleToggle}\n                icon={customIcon}\n            >\n                {this.state.isOpen ? (\n                    <InfoWindow>\n                        <div>\n                            {isImagePost\n                                ? <img src={url} alt={message} className=\"around-marker-image\"/>\n                                : <video src={url} controls className=\"around-marker-video\"/>}\n                            <p>{`${user}: ${message}`}</p>\n                        </div>\n                    </InfoWindow>\n                ) : null}\n            </Marker>\n\n        );\n    }\n}\n\nexport default AroundMarker;\n","import React, {Component} from 'react';\nimport { POS_KEY } from '../constants';\nimport AroundMarker from './AroundMarker';\n\nimport {\n    withScriptjs,\n    withGoogleMap,\n    GoogleMap,\n} from \"react-google-maps\";\n\nclass NormalAroundMap extends Component {\n    getMapRef = (mapInstance) => {\n        this.map = mapInstance;\n        window.map = mapInstance;\n    }\n\n    reloadMarker = () => {\n        const center = this.getCenter();\n        const radius = this.getRadius();\n        this.props.loadPostsByTopic(center, radius);\n    }\n\n    getCenter() {\n        const center = this.map.getCenter();\n        return { lat: center.lat(), lon: center.lng() };\n    }\n\n    getRadius() {\n        const center = this.map.getCenter();\n        const bounds = this.map.getBounds();\n        if (center && bounds) {\n            const ne = bounds.getNorthEast();\n            const right = new window.google.maps.LatLng(center.lat(), ne.lng());\n            return 0.001 * window.google.maps.geometry.spherical.computeDistanceBetween(center, right);\n        }\n    }\n\n    render() {\n        const { lat, lon } = JSON.parse(localStorage.getItem(POS_KEY));\n        return (\n            <GoogleMap\n                ref={this.getMapRef}\n                defaultZoom={11}\n                defaultCenter={{ lat, lng: lon }}\n                onDragEnd={this.reloadMarker}\n                onZoomChanged={this.reloadMarker}\n            >\n                {this.props.posts.map((post) => <AroundMarker post={post} key={post.url} />)}\n            </GoogleMap>\n\n        );\n    }\n}\n\nconst AroundMap = withScriptjs(withGoogleMap(NormalAroundMap));\n\nexport default AroundMap;\n","import React, {Component} from 'react';\nimport {\n    GEO_OPTIONS,\n    POS_KEY,\n    API_ROOT,\n    AUTH_HEADER,\n    TOKEN_KEY,\n    POST_TYPE_IMAGE,\n    POST_TYPE_VIDEO,\n    POST_TYPE_UNKNOWN,\n    TOPIC_AROUND,\n    TOPIC_FACE\n} from '../constants'\nimport {Tabs, Spin, Row, Col, Radio} from 'antd'\n\n\nimport Gallery from './Gallery';\nimport CreatePostButton from './CreatePostButton';\nimport AroundMap from \"./AroundMap\";\n\n\nconst {TabPane} = Tabs;\n\n\nclass Home extends Component {\n    state = {\n        isLoadingGeoLocation: false,\n        isLoadingPosts: false,\n        error: '',\n        posts: [],\n        topic: TOPIC_AROUND\n    }\n\n    componentDidMount() {\n        if (\"geolocation\" in navigator) {\n            navigator.geolocation.getCurrentPosition(\n                this.onSuccessLoadGeoLocation,\n                this.onFailedLoadGeoLocation,\n                GEO_OPTIONS,\n            );\n        } else {\n            this.setState({\n                error: \"Failed to get location.\"\n            })\n        }\n    }\n\n    onSuccessLoadGeoLocation = (position) => {\n        console.log(position);\n        const {latitude, longitude} = position.coords;\n        localStorage.setItem(POS_KEY, JSON.stringify({lat: latitude, lon: longitude}));\n        this.setState({isLoadingGeoLocation: false, error: ''});\n        this.loadNearbyPosts();\n    }\n\n    onFailedLoadGeoLocation = () => {\n        this.setState({isLoadingGeoLocation: false, error: 'Failed to load geo location.'});\n    }\n\n    loadNearbyPosts = (center, radius) => {\n        const {lat, lon} = center ? center : JSON.parse(localStorage.getItem(POS_KEY));\n        const range = radius ? radius : 20;\n        const token = localStorage.getItem(TOKEN_KEY);\n        this.setState({isLoadingPosts: true, error: ''});\n        return fetch(`${API_ROOT}/search?lat=${lat}&lon=${lon}&range=${range}`, {\n            method: 'GET',\n            headers: {\n                Authorization: `${AUTH_HEADER} ${token}`,\n            }\n        })\n            .then((response) => {\n                if (response.ok) {\n                    return response.json();\n                }\n                throw new Error('Failed to load posts.');\n            })\n            .then((data) => {\n                console.log(data);\n                this.setState({posts: data ? data : [], isLoadingPosts: false});\n            })\n            .catch((e) => {\n                console.error(e);\n                this.setState({isLoadingPosts: false, error: e.message});\n            });\n    }\n\n    loadPostsByTopic = (center, radius) => {\n        if (this.state.topic === TOPIC_AROUND) {\n            return this.loadNearbyPosts(center, radius);\n        } else {\n            return this.loadFacesAroundTheWolrd();\n        }\n    }\n\n    getMeta(url) {\n        var wid, hei\n        var img = new Image();\n        img.onload = function(){\n            //alert( this.width+' '+ this.height );\n            wid = this.width\n            hei = this.height\n        };\n        img.src = url;\n        return wid, hei\n    }\n\n\n    renderImagePosts() {\n        const {posts} = this.state;\n        const images = posts\n            .filter((post) => post.type === POST_TYPE_IMAGE)\n            .map((post) => {\n\n\n                var wid, hei = this.getMeta(post.url)\n                return {\n                    user: post.user,\n                    src: post.url,\n                    thumbnail: post.url,\n                    caption: post.message,\n                    thumbnailWidth: hei/500*wid,\n                    thumbnailHeight: 500,\n                };\n            });\n        return <Gallery images={images}/>\n    }\n\n\n    renderVideoPosts() {\n        const {posts} = this.state;\n        return (\n            <Row gutter={30}>\n                {\n                    posts\n                        .filter((post) => [POST_TYPE_VIDEO, POST_TYPE_UNKNOWN].includes(post.type))\n                        .map((post) => (\n                            <Col span={6} key={post.url}>\n                                <video src={post.url} controls={true} className=\"video-block\"/>\n                                <p>{post.user}: {post.message}</p>\n                            </Col>\n                        ))\n                }\n            </Row>\n        );\n    }\n\n    handleTopicChange = (e) => {\n        const topic = e.target.value;\n        this.setState({topic});\n        if (topic === TOPIC_AROUND) {\n            this.loadNearbyPosts();\n        } else {\n            this.loadFacesAroundTheWolrd();\n        }\n    }\n\n    loadFacesAroundTheWolrd = () => {\n        const token = localStorage.getItem(TOKEN_KEY);\n        this.setState({isLoadingPosts: true, error: ''});\n        return fetch(`${API_ROOT}/cluster?term=face`, {\n            method: 'GET',\n            headers: {\n                Authorization: `${AUTH_HEADER} ${token}`,\n            }\n        })\n            .then((response) => {\n                if (response.ok) {\n                    return response.json();\n                }\n                throw new Error('Failed to load posts');\n            })\n            .then((data) => {\n                console.log(data);\n                this.setState({posts: data ? data : [], isLoadingPosts: false});\n            })\n            .catch((e) => {\n                console.error(e);\n                this.setState({isLoadingPosts: false, error: e.message});\n            });\n    }\n\n\n    renderPosts(type) {\n        const {error, isLoadingGeoLocation, isLoadingPosts, posts} = this.state;\n        if (error) {\n            return error;\n        } else if (isLoadingGeoLocation) {\n            return <Spin tip=\"Loading geo location...\"/>;\n        } else if (isLoadingPosts) {\n            return <Spin tip=\"Loading posts...\"/>\n        } else if (posts.length > 0) {\n            return type === POST_TYPE_IMAGE ? this.renderImagePosts() : this.renderVideoPosts();\n        } else {\n            return 'No nearby posts';\n        }\n    }\n\n\n    render() {\n        // const operations = <Button type=\"primary\">Create New Post</Button>;\n        const operations = <CreatePostButton loadNearbyPosts={this.loadPostsByTopic} isLoggedIn = {this.props.isLoggedIn}/>;\n        return (\n            <div>\n                <Radio.Group onChange={this.handleTopicChange} value={this.state.topic}>\n                    <Radio value={TOPIC_AROUND}>Posts Around Me</Radio>\n                    <Radio value={TOPIC_FACE}>Faces Around The World</Radio>\n                </Radio.Group>\n                <Tabs tabBarExtraContent={operations} className=\"main-tabs\">\n                    <TabPane tab=\"Image Posts\" key=\"1\">\n                        {this.renderPosts(POST_TYPE_IMAGE)}\n                    </TabPane>\n                    <TabPane tab=\"Video Posts\" key=\"2\">\n                        {this.renderPosts(POST_TYPE_VIDEO)}\n                    </TabPane>\n                    <TabPane tab=\"Map\" key=\"3\">\n                        <AroundMap\n                            googleMapURL=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyD3CEh9DXuyjozqptVB5LA-dN7MxWWkr9s&v=3.exp&libraries=geometry,drawing,places\"\n                            loadingElement={<div style={{height: `100%`}}/>}\n                            containerElement={<div style={{height: `600px`}}/>}\n                            mapElement={<div style={{height: `100%`}}/>}\n                            posts={this.state.posts}\n                            loadNearbyPosts={this.loadNearbyPosts}\n                            loadPostsByTopic={this.loadPostsByTopic}\n                        />\n                    </TabPane>\n                </Tabs>\n            </div>\n\n        );\n    }\n}\n\nexport default Home;\n","import React, {Component} from 'react';\nimport {Register} from './Register';\nimport {Switch, Route, Redirect} from \"react-router-dom\";\nimport Login from './Login'\nimport Home from './Home';\n\n\n\nclass Main extends Component {\n    getLogin = () => {\n        return this.props.isLoggedIn ? <Redirect to=\"/\"/> : <Login handleLoginSucceed={this.props.handleLoginSucceed}/>;\n    }\n\n\n    getHome = () => {\n        // return this.props.isLoggedIn ? <Home/> : <Redirect to=\"/login\"/>;\n        return <Home isLoggedIn={this.props.isLoggedIn}/>\n    }\n\n\n\n    render() {\n        return (\n            <div className=\"main\">\n                {/*<Register />*/}\n                <Switch>\n                    <Route path=\"/login\" render={this.getLogin}/>\n                    <Route path=\"/register\" component={Register}/>\n                    <Route path=\"/\" render={this.getHome}/>\n                </Switch>\n            </div>\n        );\n    }\n}\n\nexport default Main;\n","import React, {Component} from 'react';\nimport TopBar from './TopBar';\nimport Main from './Main';\nimport '../styles/App.css';\nimport { TOKEN_KEY, USER_NAME } from '../constants';\n\nclass App extends Component{\n    state = {\n        isLoggedIn: Boolean(localStorage.getItem(TOKEN_KEY)),\n    }\n\n    handleLoginSucceed = (token, username) => {\n        localStorage.setItem(TOKEN_KEY, token)\n        localStorage.setItem(USER_NAME, username)\n        this.setState({ isLoggedIn: true });\n    }\n\n\n    handleLogout = () => {\n        localStorage.removeItem(TOKEN_KEY);\n        localStorage.removeItem(USER_NAME);\n        this.setState({ isLoggedIn: false });\n    }\n\n    handleLogin = () => {\n\n    }\n\n    render(){\n    return (\n        <div className=\"App\">\n          <TopBar handleLogout={this.handleLogout}\n                  isLoggedIn={this.state.isLoggedIn}\n                  username = {localStorage.getItem(USER_NAME)}\n          />\n          <Main handleLoginSucceed={this.handleLoginSucceed}\n                isLoggedIn={this.state.isLoggedIn}\n          />\n        </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nimport {BrowserRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <BrowserRouter>\n            <App/>\n        </BrowserRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}